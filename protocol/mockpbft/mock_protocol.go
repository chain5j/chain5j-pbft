// Code generated by MockGen. DO NOT EDIT.
// Source: protocol.go

// Package mockpbft is a generated GoMock package.
package mockpbft

import (
	protocol "github.com/chain5j/chain5j-pbft/protocol"
	signature "github.com/chain5j/chain5j-pkg/crypto/signature"
	types "github.com/chain5j/chain5j-pkg/types"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockPBFTEngine is a mock of PBFTEngine interface
type MockPBFTEngine struct {
	ctrl     *gomock.Controller
	recorder *MockPBFTEngineMockRecorder
}

// MockPBFTEngineMockRecorder is the mock recorder for MockPBFTEngine
type MockPBFTEngineMockRecorder struct {
	mock *MockPBFTEngine
}

// NewMockPBFTEngine creates a new mock instance
func NewMockPBFTEngine(ctrl *gomock.Controller) *MockPBFTEngine {
	mock := &MockPBFTEngine{ctrl: ctrl}
	mock.recorder = &MockPBFTEngineMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPBFTEngine) EXPECT() *MockPBFTEngineMockRecorder {
	return m.recorder
}

// Start mocks base method
func (m *MockPBFTEngine) Start() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start
func (mr *MockPBFTEngineMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockPBFTEngine)(nil).Start))
}

// Stop mocks base method
func (m *MockPBFTEngine) Stop() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop")
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop
func (mr *MockPBFTEngineMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockPBFTEngine)(nil).Stop))
}

// Request mocks base method
func (m *MockPBFTEngine) Request(arg0 *protocol.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Request", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Request indicates an expected call of Request
func (mr *MockPBFTEngineMockRecorder) Request(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Request", reflect.TypeOf((*MockPBFTEngine)(nil).Request), arg0)
}

// RequestTimeout mocks base method
func (m *MockPBFTEngine) RequestTimeout() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RequestTimeout")
}

// RequestTimeout indicates an expected call of RequestTimeout
func (mr *MockPBFTEngineMockRecorder) RequestTimeout() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestTimeout", reflect.TypeOf((*MockPBFTEngine)(nil).RequestTimeout))
}

// NewChainHead mocks base method
func (m *MockPBFTEngine) NewChainHead() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewChainHead")
	ret0, _ := ret[0].(error)
	return ret0
}

// NewChainHead indicates an expected call of NewChainHead
func (mr *MockPBFTEngineMockRecorder) NewChainHead() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewChainHead", reflect.TypeOf((*MockPBFTEngine)(nil).NewChainHead))
}

// MockPBFTBackend is a mock of PBFTBackend interface
type MockPBFTBackend struct {
	ctrl     *gomock.Controller
	recorder *MockPBFTBackendMockRecorder
}

// MockPBFTBackendMockRecorder is the mock recorder for MockPBFTBackend
type MockPBFTBackendMockRecorder struct {
	mock *MockPBFTBackend
}

// NewMockPBFTBackend creates a new mock instance
func NewMockPBFTBackend(ctrl *gomock.Controller) *MockPBFTBackend {
	mock := &MockPBFTBackend{ctrl: ctrl}
	mock.recorder = &MockPBFTBackendMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPBFTBackend) EXPECT() *MockPBFTBackendMockRecorder {
	return m.recorder
}

// ID mocks base method
func (m *MockPBFTBackend) ID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(string)
	return ret0
}

// ID indicates an expected call of ID
func (mr *MockPBFTBackendMockRecorder) ID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockPBFTBackend)(nil).ID))
}

// Validators mocks base method
func (m *MockPBFTBackend) Validators(proposal protocol.Proposal) protocol.ValidatorSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validators", proposal)
	ret0, _ := ret[0].(protocol.ValidatorSet)
	return ret0
}

// Validators indicates an expected call of Validators
func (mr *MockPBFTBackendMockRecorder) Validators(proposal interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validators", reflect.TypeOf((*MockPBFTBackend)(nil).Validators), proposal)
}

// ParentValidators mocks base method
func (m *MockPBFTBackend) ParentValidators(proposal protocol.Proposal) protocol.ValidatorSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParentValidators", proposal)
	ret0, _ := ret[0].(protocol.ValidatorSet)
	return ret0
}

// ParentValidators indicates an expected call of ParentValidators
func (mr *MockPBFTBackendMockRecorder) ParentValidators(proposal interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParentValidators", reflect.TypeOf((*MockPBFTBackend)(nil).ParentValidators), proposal)
}

// Verify mocks base method
func (m *MockPBFTBackend) Verify(proposal protocol.Proposal) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Verify", proposal)
	ret0, _ := ret[0].(error)
	return ret0
}

// Verify indicates an expected call of Verify
func (mr *MockPBFTBackendMockRecorder) Verify(proposal interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Verify", reflect.TypeOf((*MockPBFTBackend)(nil).Verify), proposal)
}

// Commit mocks base method
func (m *MockPBFTBackend) Commit(proposal protocol.Proposal, seals [][]byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit", proposal, seals)
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit
func (mr *MockPBFTBackendMockRecorder) Commit(proposal, seals interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockPBFTBackend)(nil).Commit), proposal, seals)
}

// Sign mocks base method
func (m *MockPBFTBackend) Sign(data []byte) (*signature.SignResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sign", data)
	ret0, _ := ret[0].(*signature.SignResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Sign indicates an expected call of Sign
func (mr *MockPBFTBackendMockRecorder) Sign(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sign", reflect.TypeOf((*MockPBFTBackend)(nil).Sign), data)
}

// CheckSignature mocks base method
func (m *MockPBFTBackend) CheckSignature(data []byte, validator string, sig *signature.SignResult) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckSignature", data, validator, sig)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckSignature indicates an expected call of CheckSignature
func (mr *MockPBFTBackendMockRecorder) CheckSignature(data, validator, sig interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckSignature", reflect.TypeOf((*MockPBFTBackend)(nil).CheckSignature), data, validator, sig)
}

// LastProposal mocks base method
func (m *MockPBFTBackend) LastProposal() (protocol.Proposal, string) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LastProposal")
	ret0, _ := ret[0].(protocol.Proposal)
	ret1, _ := ret[1].(string)
	return ret0, ret1
}

// LastProposal indicates an expected call of LastProposal
func (mr *MockPBFTBackendMockRecorder) LastProposal() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LastProposal", reflect.TypeOf((*MockPBFTBackend)(nil).LastProposal))
}

// HasProposal mocks base method
func (m *MockPBFTBackend) HasProposal(hash types.Hash, height uint64) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasProposal", hash, height)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasProposal indicates an expected call of HasProposal
func (mr *MockPBFTBackendMockRecorder) HasProposal(hash, height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasProposal", reflect.TypeOf((*MockPBFTBackend)(nil).HasProposal), hash, height)
}

// GetProposer mocks base method
func (m *MockPBFTBackend) GetProposer(height uint64) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProposer", height)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetProposer indicates an expected call of GetProposer
func (mr *MockPBFTBackendMockRecorder) GetProposer(height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProposer", reflect.TypeOf((*MockPBFTBackend)(nil).GetProposer), height)
}

// MockProposal is a mock of Proposal interface
type MockProposal struct {
	ctrl     *gomock.Controller
	recorder *MockProposalMockRecorder
}

// MockProposalMockRecorder is the mock recorder for MockProposal
type MockProposalMockRecorder struct {
	mock *MockProposal
}

// NewMockProposal creates a new mock instance
func NewMockProposal(ctrl *gomock.Controller) *MockProposal {
	mock := &MockProposal{ctrl: ctrl}
	mock.recorder = &MockProposalMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockProposal) EXPECT() *MockProposalMockRecorder {
	return m.recorder
}

// Height mocks base method
func (m *MockProposal) Height() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Height")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// Height indicates an expected call of Height
func (mr *MockProposalMockRecorder) Height() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Height", reflect.TypeOf((*MockProposal)(nil).Height))
}

// Hash mocks base method
func (m *MockProposal) Hash() types.Hash {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Hash")
	ret0, _ := ret[0].(types.Hash)
	return ret0
}

// Hash indicates an expected call of Hash
func (mr *MockProposalMockRecorder) Hash() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Hash", reflect.TypeOf((*MockProposal)(nil).Hash))
}
